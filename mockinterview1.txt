/*******Program-1*********/
#include<stdio.h>
#define set_byte(value,setvalue,byte)    value=(value & ~(0xFF<<(byte-1)*8)) |(setvalue<<(byte-1)*8)

void main()
{
	int value=0xABCDEFAB;
	set_byte(value,0x12,3);
	printf("%x",value);//Output:12CDEFAB for 4byte
}
/*********END**************/

n=4

10							1
9	8						2	3
7	6	5					4	5	6
4	3	2	1				7	8	9	10
Int count=n*(n+1)/2;
for(int i=0;i<n;i++){

	for(int j=0;j<i+1;j++){
		printf(“%d”,count);
		Count- -;
}
}


0 → 4

1 → 3
2 → 2
3 → 1


0 → 1
1 → 2
2 → 3

1 → 1				1
2 → 3				1+2
3 → 6				1+2+3
4 → 10				1+2+3+4
5 → 15				

1 → 1
2 → 3
3 → 6
n=1 
1
n=2
1
2  3
n=3
1
2  3
4   5  6
n=4

Compilation Stages of C :

Pre-processing
	File inclusion
	Comments removal
	Macro expansion
	.i files

Compilation
	Errors are checked
.s files

Assembly
.s → .o files
Linking
             Extern keyword handing
A.o, b.o c.o → .exe


Storage Classes in C :


Auto
Register
Extern
Static


//static int i = 10;
main()
{
	f1();
	f2();
}

f1()
{
	static int i = 10;
	printf(“%d”,i);
}


f2()
{
	printf(“%d”,i);
}

Pointers in C :

Int a =10;
Int *ptr=&a;
Int *ptr1 = &(10);

Types of pointers :
void*       → used for type casting.
dangling  → 
wild         → not initialized
null         →



int *ptr = malloc();

free(ptr);

*ptr = 10;

*ptr = NULL;



Int const* p1;//p1 points to  constant integer and address can be changed 
Int * const p2;//p2 points int value but the address we cannot change i.e we cannot do p2++
Const int* p3;//p3 points to int val which is constant
Int const* const p4;

Int a = 10;

p1 = &a
p1 = &b
*p1 = a
*p1 = b


Dynamic Memory Allocation :

Lib → stdlib.h

Malloc and calloc

Malloc: memory allocation
This function type void *
Void * malloc(sizeof(int))
Initial value=garbage value

Calloc :contagious allocation
Return type void *
Void * calloc(size_t n,sizeof(int))
Initial value=zero



Int arr[3] = {10,20,30};
printf(“%d %d”,,&arr[0]+1);		// Base Address : 1000



(int[])   &arr	= 1000 + 12
(int)    &arr[0]	= 1000 + 4



Structure Padding :

struct demo{
char a;//1
char b2;
int b;//4
char c;
Short int d2;
double d3;16+8 =24
};


Bit Manipulation :

|-> bitwise or
&->bitwise and 
^->xor
~
<< left 
>> right 



Int value = 0xABCDEFAB; 1010 1011 1100 1101 1110 1111 1010 1011 
Int mask = 0xAB;	       0000 0000 1010 1011 0000 0000 0000 0000

Int byte   = 3=(byte-1)*8=((byte+1)*4)
mask=~(0xAB<<(byte-1)*8)	// (00000…100000000000) (1111….110000000011111111)	
1111 1111<<16    //0000 0000 1111 1111 0000 0000 0000 0000
mask<<16	//0001 0010 0000 0000 0000 0000
0000 0000 1111 1111 1111 1111
0x12<<24

			
value= (value&mask)
value =value | 0xAB<<16

1 → 0
2 → 8
3 → 16
#define byte   


#define set_byte(value,mask,byte)    
value=(value & ~(0xAB<<(byte-1)*8)) |(0xAB<<(byte-1)*8);

void main()
{
	int value=0xABCDEFAB;
	set_value(value,0x12,4);
	print(“%d”,value);
}

